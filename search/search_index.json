{
    "docs": [
        {
            "location": "/",
            "text": "I am a regular committer to \nPDAL\n and an occasional contributor to \nPCL\n.\n\n\nMedium Posts\n\n\n\n\nCrossing the Streams\n\n\nUsing PCL Tools\n\n\nFOSS4G-NA 2016\n\n\nPDAL at the OSGeo Code Sprint\n\n\n\n\nPrint\n\n\n\n\n\n\nB. Chambers, J. Durand, N. Gans, and S. Hutchinson, \u201cDynamic feature point allocation using multiresolutional critical-point filters,\u201d in Proc. IEEE/RSJ Int. Conf. Intelligent Robots and Systems, Oct. 2003, pp. 504\u2013509.\n\n\n\n\n\n\nB. Chambers, \u201cPoint- and window-based matching in images using critical-point filters,\u201d M.S. thesis, Department of Electrical Engineering, University of Illinois at Urbana-Champaign, Urbana, IL, 2004.\n\n\n\n\n\n\nB. Chambers and S. Hutchinson, \u201cIntegrated tracking and control using condensation-based critical-point matching,\u201d in Proc. IEEE/RSJ Int. Conf. Intelligent Robots and Systems, Oct. 2004, pp. 949\u2013956.\n\n\n\n\n\n\nB. Chambers, R. Ansari, D. Campbell, and W. Reynolds, \u201cWavelet-based target detection using multiscale directional analysis,\u201d in Proc. SPIE 6566, 656608, Apr. 2007.\n\n\n\n\n\n\nR. Ansari, D. Fennell, A. Bagci, W. Reynolds, and B. Chambers, \u201cEfficient structures for image decomposition using directional filter banks,\u201d in Proc. SPIE 6566, 65660Y, Apr. 2007.\n\n\n\n\n\n\nPresentations\n\n\n\n\nB. Chambers, \"PDAL Algorithm Development Deep Dive,\" FOSS4G-NA 2018, May 2018.\n (\nslides\n) (\nbinder\n)\n\n\nB. Chambers, \"Point Cloud Filters & Pipelines in PDAL,\" FOSS4G 2017, Aug. 2017\n (\nvideo\n)\n\n\nB. Chambers, \"Filtering point clouds with PDAL and PCL,\" FOSS4G-NA 2016, May. 2016\n (\nslides\n)\n\n\nB. Chambers, \"Open Source Lidar Software,\" Mil-OSS WG4, Oct. 2012.\n\n\n\n\nTutorials\n\n\n\n\n\n\nUsing PDAL with CMake\n\n\n\n\n\n\nReading with PDAL\n\n\n\n\n\n\nWriting with PDAL\n\n\n\n\n\n\nFiltering data with PCL\n\n\n\n\n\n\nIdentifying ground returns using ProgressiveMorphologicalFilter segmentation\n\n\n\n\n\n\nGround Filter Tutorial\n\n\n\n\n\n\nCalculating Normalized Heights\n\n\n\n\n\n\nPerforming Poisson Sampling of Point Clouds Using Dart Throwing\n\n\n\n\n\n\nWriting a filter\n\n\n\n\n\n\nWriting a kernel\n\n\n\n\n\n\nWriting a reader\n\n\n\n\n\n\nWriting a writer",
            "title": "Home"
        },
        {
            "location": "/#medium-posts",
            "text": "Crossing the Streams  Using PCL Tools  FOSS4G-NA 2016  PDAL at the OSGeo Code Sprint",
            "title": "Medium Posts"
        },
        {
            "location": "/#print",
            "text": "B. Chambers, J. Durand, N. Gans, and S. Hutchinson, \u201cDynamic feature point allocation using multiresolutional critical-point filters,\u201d in Proc. IEEE/RSJ Int. Conf. Intelligent Robots and Systems, Oct. 2003, pp. 504\u2013509.    B. Chambers, \u201cPoint- and window-based matching in images using critical-point filters,\u201d M.S. thesis, Department of Electrical Engineering, University of Illinois at Urbana-Champaign, Urbana, IL, 2004.    B. Chambers and S. Hutchinson, \u201cIntegrated tracking and control using condensation-based critical-point matching,\u201d in Proc. IEEE/RSJ Int. Conf. Intelligent Robots and Systems, Oct. 2004, pp. 949\u2013956.    B. Chambers, R. Ansari, D. Campbell, and W. Reynolds, \u201cWavelet-based target detection using multiscale directional analysis,\u201d in Proc. SPIE 6566, 656608, Apr. 2007.    R. Ansari, D. Fennell, A. Bagci, W. Reynolds, and B. Chambers, \u201cEfficient structures for image decomposition using directional filter banks,\u201d in Proc. SPIE 6566, 65660Y, Apr. 2007.",
            "title": "Print"
        },
        {
            "location": "/#presentations",
            "text": "B. Chambers, \"PDAL Algorithm Development Deep Dive,\" FOSS4G-NA 2018, May 2018.  ( slides ) ( binder )  B. Chambers, \"Point Cloud Filters & Pipelines in PDAL,\" FOSS4G 2017, Aug. 2017  ( video )  B. Chambers, \"Filtering point clouds with PDAL and PCL,\" FOSS4G-NA 2016, May. 2016  ( slides )  B. Chambers, \"Open Source Lidar Software,\" Mil-OSS WG4, Oct. 2012.",
            "title": "Presentations"
        },
        {
            "location": "/#tutorials",
            "text": "Using PDAL with CMake    Reading with PDAL    Writing with PDAL    Filtering data with PCL    Identifying ground returns using ProgressiveMorphologicalFilter segmentation    Ground Filter Tutorial    Calculating Normalized Heights    Performing Poisson Sampling of Point Clouds Using Dart Throwing    Writing a filter    Writing a kernel    Writing a reader    Writing a writer",
            "title": "Tutorials"
        },
        {
            "location": "/post/crossing-the-streams/",
            "text": "In January of this year, I was convinced to submit an abstract for \nFOSS4G North America 2016\n. To my delight, my talk on \nFiltering point clouds with PDAL and PCL\n was accepted. This is a topic that is near and dear to me as an early adopter and contributor to both \nPDAL\n and \nPCL\n.\n\n\n\n\n\nTo this day, I find it quite convenient to leverage PCL's extensive collection of \nmodules\n when developing new approaches to processing point cloud data. Though the pace of PCL development has slowed (latest \nrelease\n, \nworkshop\n and \ncode sprint\n were all in 2014), there is still a wealth of algorithms that can aid in point cloud processing and analysis tasks. And it is easily \nextensible\n.\n\n\nWhile point clouds can be derived from a \nnumber\n of \nsources\n, my focus continues to be on point clouds collected by airborne lidar systems, where \nLAS\n, \nLAZ\n, and the lesser known \nBPF\n formats are the norm. When it comes to reading/writing these (and other) formats, I'd rather not worry about the details, which is were PDAL shines. The PDAL \nCLI\n allows me to effortlessly transcode between formats using the \ntranslate\n subcommand.\n\n\n$ pdal translate -i input.bpf -o output.laz\n\n\n\n\nHere we have converted a point cloud input written in the BPF format to a point cloud compressed as LAZ. But the fun doesn't end there! We can also construct processing pipelines by inserting \nfilters\n.\n\n\n$ pdal translate -i input.bpf -o output.laz -f range \\\n    --filters.range.limits=\"Z(0:]\"\n\n\n\n\nThis example performs the same format conversion, but uses a \nrange\n filter to only pass points with Z values that are greater than 0.\n\n\nPipelines can also be specified as JSON, invoked using the \npipeline\n subcommand.\n\n\n$ pdal pipeline -i pipeline.json\n\n\n\n\nHere is the earlier transcoding example, specified using PDAL's JSON \nspecification\n.\n\n\n{\n  \"pipeline\":[\n    \"input.bpf\",\n    \"output.laz\"\n  ]\n}\n\n\n\n\nSimilarly, the range filtering example is given by:\n\n\n{\n  \"pipeline\":[\n    \"input.bpf\",\n    {\n      \"type\":\"filters.range\",\n      \"limits\":\"Z(0:]\"\n    },\n    \"output.laz\"\n  ]\n}\n\n\n\n\nThis barely scratches the surface of what PDAL can do, but I think you get the idea.\n\n\nWhile it was at first tempting to either 1) write format drivers for PCL or 2) write the processing algorithms for PDAL, both of these overlook a vital aspect of open source software: \ncommunity\n. If I were to go with option 1, I'd be on an island -- at least initially. The established PCL community already had a \nformat\n. The same was true for option 2. PDAL's goal in life is really to focus on formats. Sure it would be nice to have many of the PCL algorithms living natively within PDAL, but I don't want to spend the bulk of my time recoding a bunch of algorithms, and it didn't seem there was a body of developers who wanted to jump in on the task with me.\n\n\nNo. What I really want to do is to come up with novel ways of processing the data. Sometimes this will mean writing (or implementing) a \nnew\n or \nexisting\n algorithm. Other times it's simply a matter of wiring up existing algorithms in a \nnew way\n. To that end, we've developed methods for incorporating PCL within PDAL, along with new and intuitive ways to interact with PDAL. Over the coming weeks, my hope is to be able to share with you a number of methods we have developed that bridge the PDAL-PCL divide.",
            "title": "Crossing the streams"
        },
        {
            "location": "/post/using-pcl-tools/",
            "text": "In our introductory \npost\n on the topic, we expressed a desire to bring together \nPDAL\n and \nPCL\n. The first step that we took nearly four years ago was to create a \nwriter\n for the PCD \nformat\n. Jump forward two years, and we eventually \nadded\n PCL-backed drivers for both PCD \nreading\n and \nwriting\n, adding support for not just ASCII data, but binary compressed data as well.\n\n\nWith these drivers in place, we can now take the obvious first step for anybody experimenting with PDAL and PCL -- just convert some data to PCD to use with PCL's command line \ntools\n. Of course, with PDAL \ntranslate\n, this is a breeze!\n\n\nStep 1: Data Prep\n\n\nLet's begin by downloading some \ndata\n from \nWVView\n. We can transcode this to binary compressed PCD using the command:\n\n\n$ pdal translate C23745.las C23745.pcd --writers.pcd.compression=true\n\n\n\n\nStep 2: Outlier Removal\n\n\nNow, let's take a look at the point cloud using \npcl_viewer\n.\n\n\n$ pcl_viewer C23745.pcd\n\n\n\n\n\n\nThe above view of the point cloud is taken by rotating the content on it's side (the default view is top-down), colorizing by elevation, and enlarging the point size slightly. It reveals an important aspect of the data: outliers. If you look closely, you may notice at least two outliers up in the air. Such outliers can adversely affect statistics (e.g., elevation range) and products (e.g., maximum Z grids). In the viewer, it has also skewed the color ramp (though a technique similar to contrast stretch could be used to scale the elevation color ramp more intelligently).\n\n\nNo problem! We can continue with PCL tools, in particular \npcl_outlier_removal\n. (Note: PCL currently supports two methods of outlier removal: statistical and radius. These may or may not be the right tool for any given application, and the parameters shown are just an example. The proper approach to outlier removal will depend on your data and application.)\n\n\n$ pcl_outlier_removal C23745.pcd C23745-filtered.pcd -method statistical -mean_k 8 -std_dev_mul 2.0\nStatistical Outlier Removal filtering of a point cloud. For more information, use: pcl_outlier_removal -h\n> Loading C23745.pcd [done, 284 ms : 3080188 points]\nAvailable dimensions: x y z intensity rgba\nComputing filtered cloud from 3080188 points with mean_k 8, std_dev_mul 2.000000, inliers 0 ...[done, 5221 ms : 3079018 points, 1170 indices removed]\n> Saving C23745-filtered.pcd [done, 315 ms : 3079018 points]\n\n\n\n\nWe turn once again to \npcl_viewer\n to visualize the result.\n\n\n$ pcl_viewer C23745-filtered.pcd\n\n\n\n\n\n\nAs you can see, the outlier removal tool has removed the sky noise points, and the profile view appears to be much cleaner, with a more suitable color ramp.\n\n\nStep 3: Subsampling\n\n\nPCL's voxel grid filter can be used to subsample the data, by replacing all points within a three-dimensional voxel with the centroid of the points in that voxel. The leaf size here specifies the edge length of the voxel. (Note: The choice to subsample in this manner is destructive, and the data density will be reduced. This may or may not be desirable depending on your application.)\n\n\n$ pcl_voxel_grid C23745-filtered.pcd C23745-vg.pcd -leaf 2.0,2.0,2.0\nDownsample a cloud using pcl::VoxelGrid. For more information, use: pcl_voxel_grid -h\nUsing a leaf size of: 2.000000, 2.000000, 2.000000\nFiltering data on field: z between: -inf ->inf\n> Loading C23745-filtered.pcd [done, 288 ms : 3079018 points]\nAvailable dimensions: x y z intensity rgba\n> Computing [done, 340 ms : 707478 points]\n> Saving C23745-vg.pcd [done, 97 ms : 707478 points]\n\n\n\n\nBelow are before and after shots of the same viewpoint, showing the subsampled point cloud created by the voxel grid filter, which is composed of roughly 25% of the original number of points.\n\n\n\n\n\n\nConclusion\n\n\nAlthough this is a very loose integration of PCL and PDAL, we have begun to show how the two libraries can be used in tandem for data analysis and exploitation. In future posts, I will provide more details on how the conversions between PDAL and PCL take place and how PCL modules have been embedded directly into PDAL for more flexible and advanced processing workflows.",
            "title": "Using pcl tools"
        },
        {
            "location": "/post/using-pcl-tools/#step-1-data-prep",
            "text": "Let's begin by downloading some  data  from  WVView . We can transcode this to binary compressed PCD using the command:  $ pdal translate C23745.las C23745.pcd --writers.pcd.compression=true",
            "title": "Step 1: Data Prep"
        },
        {
            "location": "/post/using-pcl-tools/#step-2-outlier-removal",
            "text": "Now, let's take a look at the point cloud using  pcl_viewer .  $ pcl_viewer C23745.pcd   The above view of the point cloud is taken by rotating the content on it's side (the default view is top-down), colorizing by elevation, and enlarging the point size slightly. It reveals an important aspect of the data: outliers. If you look closely, you may notice at least two outliers up in the air. Such outliers can adversely affect statistics (e.g., elevation range) and products (e.g., maximum Z grids). In the viewer, it has also skewed the color ramp (though a technique similar to contrast stretch could be used to scale the elevation color ramp more intelligently).  No problem! We can continue with PCL tools, in particular  pcl_outlier_removal . (Note: PCL currently supports two methods of outlier removal: statistical and radius. These may or may not be the right tool for any given application, and the parameters shown are just an example. The proper approach to outlier removal will depend on your data and application.)  $ pcl_outlier_removal C23745.pcd C23745-filtered.pcd -method statistical -mean_k 8 -std_dev_mul 2.0\nStatistical Outlier Removal filtering of a point cloud. For more information, use: pcl_outlier_removal -h\n> Loading C23745.pcd [done, 284 ms : 3080188 points]\nAvailable dimensions: x y z intensity rgba\nComputing filtered cloud from 3080188 points with mean_k 8, std_dev_mul 2.000000, inliers 0 ...[done, 5221 ms : 3079018 points, 1170 indices removed]\n> Saving C23745-filtered.pcd [done, 315 ms : 3079018 points]  We turn once again to  pcl_viewer  to visualize the result.  $ pcl_viewer C23745-filtered.pcd   As you can see, the outlier removal tool has removed the sky noise points, and the profile view appears to be much cleaner, with a more suitable color ramp.",
            "title": "Step 2: Outlier Removal"
        },
        {
            "location": "/post/using-pcl-tools/#step-3-subsampling",
            "text": "PCL's voxel grid filter can be used to subsample the data, by replacing all points within a three-dimensional voxel with the centroid of the points in that voxel. The leaf size here specifies the edge length of the voxel. (Note: The choice to subsample in this manner is destructive, and the data density will be reduced. This may or may not be desirable depending on your application.)  $ pcl_voxel_grid C23745-filtered.pcd C23745-vg.pcd -leaf 2.0,2.0,2.0\nDownsample a cloud using pcl::VoxelGrid. For more information, use: pcl_voxel_grid -h\nUsing a leaf size of: 2.000000, 2.000000, 2.000000\nFiltering data on field: z between: -inf ->inf\n> Loading C23745-filtered.pcd [done, 288 ms : 3079018 points]\nAvailable dimensions: x y z intensity rgba\n> Computing [done, 340 ms : 707478 points]\n> Saving C23745-vg.pcd [done, 97 ms : 707478 points]  Below are before and after shots of the same viewpoint, showing the subsampled point cloud created by the voxel grid filter, which is composed of roughly 25% of the original number of points.",
            "title": "Step 3: Subsampling"
        },
        {
            "location": "/post/using-pcl-tools/#conclusion",
            "text": "Although this is a very loose integration of PCL and PDAL, we have begun to show how the two libraries can be used in tandem for data analysis and exploitation. In future posts, I will provide more details on how the conversions between PDAL and PCL take place and how PCL modules have been embedded directly into PDAL for more flexible and advanced processing workflows.",
            "title": "Conclusion"
        },
        {
            "location": "/post/foss4gna-2016/",
            "text": "As \npreviously mentioned\n, I presented my talk on \"Filtering point clouds with PDAL and PCL\" at \nFOSS4G North America 2016\n this morning. I'm happy to announce that the slides are now \nposted\n.\n\n\nIf you made it out to Raleigh and saw the talk in person, thanks for attending! If not, a video of the talk should be posted in the near future. I'll be sure to share the link as soon as it is ready.",
            "title": "Foss4gna 2016"
        }
    ]
}